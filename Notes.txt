--------------------------------------------------------------------------------
----------------------------------How to build a Bash script
Nano = to create a script
	Nano = Create a new script
	Nano scriptName = create an existing script
Cntrl + O = Save and then enter
Cntrl + X = Exit from nano

#!/bin/bash = what kind of script we are writing

0 = successful; 1-255 = unsuccessful = This tell the shel if the commands run correctly

chmod [permission] [file_name] = Define permission to the file
	*Example: chmod u=rwx,g=rwx,o=rwx [file_name]
		-Define accessibility for the user/owner (u), group (g), and others (o).
		-Followed by the equal sign (=) and the first letter of the read (r), write (w) and/or execute (x) privileges.
	*Example 2: chmod 644 test.txt = 6: for the user, 4: group, the other 4: others
		-7 = for read, write, and execute permission
		-6 = for read and write privileges
		-5 = for read and execute privileges
		-4 = for read privileges
		-0 = for no privileges
	
Ls -l = See the permissions, if it starts with - it is a file, but d it is a folder 

.tar = .zip

-it = Correr el bash pero espere a que yo le de entrada, porque es interactivo

Mv scriptName folderToMove = to move 1 file a folder

Ls -a = to show hidden files

PATH variable = Tell the shell where to search for executable files, it constain the list of folders that the shell will search for executeble files to run as command names
	*echo $PATH
Inside .profile or .bash_profile we can add the following line to make it global
	*Export PATH="$PATH:$HOME/PathOfScript": to edit it we use 'nano' command

Source pathFile = To reload the file without restart the terminal

--------------------------------------------------------------------------------
----------------------------------Variables and Shell Expansions
3 types of shell parameters
	Variables: Values i can change manually, the variable in shell MUST not have spaces in the middle
	Positional parameters: 
	Special parameters: 

HOME variable = It's used to store the absolute path to the current user's home
	*echo $HOME
USER variable = Username of the current user
	*echo $USER
HOSTNAME = Name of the computer
HOSTTYPE = Architecture of the computer
PS1 = Contains the prompt string shown
PWD or ~+ = Current directory
OLDPWD or ~- = Out previos directory

variableName = someValue
echo ${#variableName} = This will print the lenght of the variable
echo ${variableName,,} = All minus, only 1 "," just modify the first
echo ${variableName^^} = All mayus, only 1 "^" just modify the first
echo ${variableName:start:long(optional)} = To split the string value, without the end, it will cut from the start to the end

TILDE EXPANSION = ~
It refers to HOME directory without having to type it

BRACE EXPANSION
Examples
	-echo {1,2,a,b,hola,mundo}
	-echo {1,2,3,4,5,6,7,8,9,10} or echo {1..10}, it is to print a range instead using commas to separate each value
	-echo {1..100..3} if we want to do the list with a specific steps, we must type it after the range values
	-echo month{1..12} this will prefix month for each number like month1, month2...
		or, we can do something like this to have the same amount of digits
		-echo month(01...12), this will show month01, month02...month12
	-mkdir month{01..12}, this will let us create new folders of months
		-touch month{01..12}/day{01..31}.txt, this will create empty text file (this case will be 31 files) inside each folder alrady created
	
--------------------------------------------------------------------------------
----------------------------------How to build a Bash script
Nano = to create a script
	Nano = Create a new script
	Nano scriptName = create an existing script
Cntrl + O = Save and then enter
Cntrl + X = Exit from nano

#!/bin/bash = what kind of script we are writing

0 = successful; 1-255 = unsuccessful = This tell the shel if the commands run correctly

chmod [permission] [file_name] = Define permission to the file
	*Example: chmod u=rwx,g=rwx,o=rwx [file_name]
		-Define accessibility for the user/owner (u), group (g), and others (o).
		-Followed by the equal sign (=) and the first letter of the read (r), write (w) and/or execute (x) privileges.
	*Example 2: chmod 644 test.txt = 6: for the user, 4: group, the other 4: others
		-7 = for read, write, and execute permission
		-6 = for read and write privileges
		-5 = for read and execute privileges
		-4 = for read privileges
		-0 = for no privileges
	
Ls -l = See the permissions, if it starts with - it is a file, but d it is a folder 

.tar = .zip

-it = Correr el bash pero espere a que yo le de entrada, porque es interactivo

Mv scriptName folderToMove = to move 1 file a folder or could be used like a rename option

Ls -a = to show hidden files

rm fileName = To remove/delete the files

touch fileName = This will create an empty file

cat fileName = Show what contains the file

$0 = This will print the name of the current shell

bash --version = To know the bash version

PATH variable = Tell the shell where to search for executable files, it constain the list of folders that the shell will search for executeble files to run as command names
	*echo $PATH
Inside .profile or .bash_profile we can add the following line to make it global
	*Export PATH="$PATH:$HOME/PathOfScript": to edit it we use 'nano' command

Source pathFile = To reload the file without restart the terminal

--------------------------------------------------------------------------------
----------------------------------Variables and Shell Expansions
3 types of shell parameters
	Variables: Values i can change manually, the variable in shell MUST not have spaces in the middle
	Positional parameters: 
	Special parameters: 

HOME variable = It's used to store the absolute path to the current user's home
	*echo $HOME
USER variable = Username of the current user
	*echo $USER
HOSTNAME = Name of the computer
HOSTTYPE = Architecture of the computer
PS1 = Contains the prompt string shown
PWD or ~+ = Current directory
OLDPWD or ~- = Out previous directory

variableName = someValue
echo ${#variableName} = This will print the lenght of the variable
echo ${variableName,,} = All minus, only 1 "," just modify the first
echo ${variableName^^} = All mayus, only 1 "^" just modify the first
echo ${variableName:start:long(optional)} = To split the string value, without the end, it will cut from the start to the end

TILDE EXPANSION = ~
It refers to HOME directory without having to type it

BRACE EXPANSION
Examples
	-echo {1,2,a,b,hola,mundo}
	-echo {1,2,3,4,5,6,7,8,9,10} or echo {1..10}, it is to print a range instead using commas to separate each value
	-echo {1..100..3} if we want to do the list with a specific steps, we must type it after the range values
	-echo month{1..12} this will prefix month for each number like month1, month2...
		or, we can do something like this to have the same amount of digits
		-echo month(01...12), this will show month01, month02...month12
	-mkdir month{01..12}, this will let us create new folders of months
		-touch month{01..12}/day{01..31}.txt, this will create empty text file (this case will be 31 files) inside each folder alrady created
	-rm {1..5}, this is to remove files named from 1 to 5

--------------------------------------------------------------------------------
----------------------------------How bash processes command lines
Steps before execute a command line
	1-TOKENISATION:  A sequence of characters that is considered as a single unit by the shell, the shell determines where a token starts and where it ends by looking this characters: |, &, ;, () <>, space, tab and newline, these are named Metacharacters
		-Words: NEVER contain unquoted metacharacts
		-Operators: ALWAYS contain unquoted metacharacts

	2-COMMAND IDENTIFICATION: The shell breaks the command line up into either simple or compound commands
	 	-Simple command: it is the command name (this first word) and others are the arguemets for that command
		-Compound commands: Provide Basche with its programming construts, such if statements or some loops

	3-EXPASIONS: Such as word splitting and globin, some of the expansions are Brace, Parameters, Arithmetic, Command, Tilde, Word Splitting and Globbing. The expansions that are in the same stage are all given the same priority, and are simply performed in the order they are found on the command line when it is read from left to right
		The order of the expansions are:
			1-Brace
			2-Parameter, Arithmetic, Command Substitution and Tilde
			3-Word splitting: This work only with Parameter, Command and Arithmetic
				*IFS: To split the unquoted values, the default values are space, tab and newline, but IT can be changed
				NOTE: If I want the output of Parameter, Arithmetic and a Command Substitution, to be considered as a single word: WRAP THAT EXPANSION IN DOUBLE QUOTES
			4-Globbing: Only words containing unquoted special pattern characters are interpreted as patterns
				-*: files.* = all named file or *.txt = all text files or files*.txt = that has some value after "file" and it is a text file
				-?: file?.txt = all the files that have some value (1 value) after file and the dot or file???.pdf = all values that have some 3 values and they are pdf
				-[]: Only marck the lenght and characters that you put inside it
					-ls file[abc].txt = Will match all the text files that have some of the 3
					-ls file[abc][abc][abc].txt = Each of the []'s are trying to match 1 of the value given
					-ls file[a-g].txt = Will search inside the range given

	4-QUOTE REMOVAL: How the command is interpreted, so this step will simply remove all those supportuve quotes, the shell removes all the unquoted backslashes, single quote abd double quote

	5-REDIRECTION
		Standards: 0 = Input, 1 = Output, 2 = Error, this numbers
		-cat < hello.txt = Will show what is inside the file
		-echo "This is some output test" > TestOutput.txt, or, cd commandLine 2> error.txt = this will record the error inside the file
		-> stand output, 2> standart error and &> standart error and output at same time, >> redirection operator redirects standard output of a command to a file.


--------------------------------------------------------------------------------
----------------------------------Requesting User Input
POSITIONAL PARAMETERS: They are parameters set by the shell to store the value of each of these command line arguemets, I can't save the data manually, also, I can refer to values help by positional parameters using parameter expansions, and for numbers bigger than 10, they should be used like this ${10}

SPECIAL PARAMETERS: The value of a special parameter is calculated for us based on our current script, and they are unmodifiable
	-$#: Expands the positional parameter or stores the number of command line arguments that have been provided to the script
	-$0: Expands the name of the current for this case, but in a script, expands the name of the script
	-$@: Allow us to access to all positional parameters at once, expands to all the positional parameters provided to the script, but provides them as 'unquoted separate words', that are subject to word splitting
		-"$@": In case we want to send params with spaces like this: "Monthly Report", if we use this with the another way, it will be separete in 2, it stops the words splitting from happening on the positional parameters
	-$*: Allow us to access to all positional parameters at once, provides alll positional parameters as one word, but separeted by the first character of the IFS variable. The final word is not subject to further word splitting
	NOTE: $* is exactly the same as $@, as it expands each of the positional parameters to individual words that are subject to word splitting. However, "$*" join each postional parameter into one word, but places the first character of the IFS, variable between them. Unlike $*, the result of "$*" is not subject to word splitting

READ COMMANDS: Let the console read some input value from the user
	-read -p: It will let us to show a message/note to the user before the input value
	-read -t amountSeconds: Will move to the next line after that time
	-read -s: Will hide the values, like a password field
	NOTE: I can use the 3 options at the same time, i.e. read -s -t 5 -p rest of the line

SELECT COMMAND: Saves the value of selectable option to a variable based on the users's selectoon
	-PS3 variable: Customise the select prompt and give information to the user about the options that is going to show
	NOTE: Create a BREAK command line before done line, it's a good practice

--------------------------------------------------------------------------------
----------------------------------Logic
CHAINING COMMANDS WITH LIST OPERATORS
	-List: When you put one or more commands on a given line
	-List operators: Types of control operators that enable us to create list of commands that operate in different ways
		-&, Allow us to run commands asynchronously, runs all the commands in the list regardless of whether the previous command ran successfully or not
		-;, Runs commands sequentially, it means, runs the commands one after the other
		-&&, Runs the next command only if the command before it runs successfully
		-||, Runs the second command runs only if the previous command fails

TEST COMMANDS + CONDITIONAL OPERATORS
	-Test command: A command that can be used in bash to compare different pieces of information, to run a test, it is neccessary to close the commands with []
		i.e. *[ 2 -eq 2 ] ; echo $? = This means, if the values are equal, then, print the result
			 *[[ "hello" = "goodbye" ]] ; $? = For this case, we are using "=" because we comparing strings
			 *[] = To test operators
			 *[[]] = To test commands
		NOTE: 0 = TRUE, 1 = FALSE, we that to put an space between the squeare brakets and the test command
	-Conditional Operators
		-eq = equal, -nq = not equal, -gt = grater than, -lt = less than, -gep = grater than equal, -leq = less than equal, -z = checks if a string is empty or null
		,e = if a file exists, -f = checks if it's a regular file, -d = if something is a directory, -x = if a scritp exists and has execution permissions

--------------------------------------------------------------------------------
----------------------------------Processing Options & Reading Files
GETOPTS: Enable Bash to get the options provided to the script. This commands doesn't get all the options at once, each time you run the script, it will read only 1 line, i.e. 1 time that it's run, it'll get the first opt, 2 time -> 2 option..., for this reason, it's a good idea to add a while before the command

--------------------------------------------------------------------------------
----------------------------------Arrays + For loops
ARRAYS
	-Create an array = variableName=$(values separete by spaces)
	-Read an array = ${variableName[index]}
	-Show all = ${variableName[@]}
	-Show a section = ${variableName[@]:startsPosition:lastPositionOptional}
	-Add an element to the end = variableName+=(newValues)
	-Delete an specific value = unset variableName[index], NOTE: If you delete the element, you also are deleting the index of that element
	-Show indexs of elements = ${!variableName[@]
	-Change an element = variableName[index]=newValue

READARRAY COMMAND (This command for Bash v3.x.x, doesn't work, the alternative would be use Read Loop (i.e. read_while.sh))
	-NOTE: It's alternative is 'for and array/file_creator.sh' 